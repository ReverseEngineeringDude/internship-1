✅ Main Idea:
This system is for a company that provides employees to projects and sends invoices to customers based on hours worked.

🔥 Full Simple Flow (In Real Life Terms):
A company (organization) exists.

Company has users (admins, staff) and employees (workers).

Customers give projects to the company.

Employees work on these projects (tracked using TimeLog).

Based on this work, invoices are created.

Invoices include details like employee hours, rate, etc.

🧱 DATABASE TABLES EXPLAINED
1. Organization
Example: "Cubeeto Pvt Ltd"

Has: id, name

2. User
Company staff: admin, accountant, etc.

Fields: id, name, email, password, organization_id

3. Role & UserRole
Example roles: Admin, Manager

Many-to-many relation between User and Role.

4. Group & UserGroup
Users can be in groups like “Billing Team”, “Sales Team”.

Another many-to-many relation.

5. Customer
Clients of the company.

Fields: name, email, phone, address, organization_id

6. Project
Projects given by customers.

Linked to a customer.

Fields: name, customer_id, start_date, end_date

7. Employee
Workers under the organization.

Fields: name, rate_per_hour, designation, organization_id

8. TimeLog
Daily work entry of employees on a project.

Fields: employee_id, project_id, date, hours_worked

9. Invoice
Sent to the customer.

Linked to a project and customer.

Fields: invoice_date, total_amount, status

10. Invoice_Item
Each line in the invoice.

Example: "Shahad worked 5 hours at ₹100/hour"

Fields: invoice_id, employee_id, total_hours, rate, subtotal

🧪 Simple Prototype Idea (Frontend Pages):
🏠 1. Dashboard
Show: organization name, total projects, total invoices, total customers.

👥 2. Users Page
Add/view/edit/delete users

Assign roles & groups

🧑‍💼 3. Employees Page
Add employees, set their hourly rate and designation

🧑‍💻 4. Projects Page
Create new project for a customer

View assigned employees

⏱️ 5. TimeLog Page
Enter work hours per employee per day

📄 6. Invoice Page
Create invoices based on TimeLog

Show amount, employee work, totals

🔄 Backend Functions (APIs):
API	Method	Purpose
/users/	GET, POST	Manage users
/roles/	GET, POST	Manage roles
/groups/	GET, POST	Manage groups
/customers/	GET, POST	Manage customers
/projects/	GET, POST	Manage projects
/employees/	GET, POST	Manage employees
/timelog/	GET, POST	Log work hours
/invoice/	GET, POST	Create and view invoices

💡 Tools You Can Use to Build This:
Backend: FastAPI or Express.js

Frontend: React.js or HTML + Bootstrap

Database: PostgreSQL or MySQL

ORM: SQLAlchemy or Prisma